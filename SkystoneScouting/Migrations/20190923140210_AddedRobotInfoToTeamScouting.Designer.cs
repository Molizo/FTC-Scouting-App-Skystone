// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkystoneScouting.Data;

namespace SkystoneScouting.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190923140210_AddedRobotInfoToTeamScouting")]
    partial class AddedRobotInfoToTeamScouting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SkystoneScouting.Models.Event", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AllowedUsers");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SkystoneScouting.Models.OfficialMatch", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Blue1Surrogate");

                    b.Property<string>("Blue1TeamID");

                    b.Property<bool>("Blue2Surrogate");

                    b.Property<string>("Blue2TeamID");

                    b.Property<int?>("BlueScore");

                    b.Property<string>("EventID");

                    b.Property<string>("MatchNumber");

                    b.Property<int>("MatchType");

                    b.Property<bool>("Red1Surrogate");

                    b.Property<string>("Red1TeamID");

                    b.Property<bool>("Red2Surrogate");

                    b.Property<string>("Red2TeamID");

                    b.Property<int?>("RedScore");

                    b.HasKey("ID");

                    b.ToTable("OfficialMatch");
                });

            modelBuilder.Entity("SkystoneScouting.Models.ScoutedMatch", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Alliance");

                    b.Property<bool>("Auto_BuildingFoundationReposition");

                    b.Property<int>("Auto_DeliveredSkystones");

                    b.Property<int>("Auto_DeliveredStones");

                    b.Property<string>("Auto_Description");

                    b.Property<bool>("Auto_NavigatedUnderSkybridge");

                    b.Property<int>("Auto_PlacedStones");

                    b.Property<int>("Auto_StonesDeliveredUnderAllianceSkybridge");

                    b.Property<int>("Auto_TimeToComplete");

                    b.Property<string>("Description");

                    b.Property<bool>("HumanPlayer");

                    b.Property<long>("MajorPenalties");

                    b.Property<string>("MatchNumber");

                    b.Property<int>("MatchType");

                    b.Property<long>("MinorPenalties");

                    b.Property<bool>("RobotDisconnected");

                    b.Property<bool>("RobotMalfunction");

                    b.Property<int>("Score");

                    b.Property<int>("StartingPosition");

                    b.Property<string>("TeamID");

                    b.Property<int>("TeleOP_BuildingPlatformReposition");

                    b.Property<int>("TeleOP_CapstoneLevel");

                    b.Property<string>("TeleOP_Description");

                    b.Property<bool>("TeleOP_HasPlacedCapstone");

                    b.Property<int>("TeleOP_NumberOfSkyscrapers");

                    b.Property<int>("TeleOP_NumberOfStonesPlaced");

                    b.Property<bool>("TeleOP_ParkedInBuildingSite");

                    b.Property<int>("TeleOP_SkyscraperLevel");

                    b.Property<int>("TeleOP_StonesDeliveredUnderAllianceSkybridge");

                    b.HasKey("ID");

                    b.ToTable("ScoutedMatch");
                });

            modelBuilder.Entity("SkystoneScouting.Models.Team", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Auto_FoundationRepositioned");

                    b.Property<bool>("Auto_RobotNavigated");

                    b.Property<int>("Auto_Stone1Type");

                    b.Property<int>("Auto_Stone2Type");

                    b.Property<int>("Auto_Stone3Type");

                    b.Property<int>("Auto_Stone4Type");

                    b.Property<int>("Auto_Stone5Type");

                    b.Property<int>("Auto_Stone6Type");

                    b.Property<int>("Auto_StonesPlaced");

                    b.Property<double?>("AvgPTS");

                    b.Property<double?>("AvgRP");

                    b.Property<double?>("AvgTBP");

                    b.Property<double?>("CCWM");

                    b.Property<double?>("DPR");

                    b.Property<string>("Description");

                    b.Property<int>("EndGame_CapstoneHeight");

                    b.Property<bool>("EndGame_CapstonePlaced");

                    b.Property<bool>("EndGame_FoundationMoved");

                    b.Property<bool>("EndGame_RobotParked");

                    b.Property<string>("EventID");

                    b.Property<int?>("ExpPTS");

                    b.Property<double?>("OPR");

                    b.Property<string>("TeamAddress");

                    b.Property<string>("TeamName");

                    b.Property<string>("TeamNumber");

                    b.Property<int>("TeleOP_MaximumReachableHeight");

                    b.Property<int>("TeleOP_StonesDelivered");

                    b.Property<int>("TeleOP_StonesPlaced");

                    b.Property<int>("TeleOP_StonesReturned");

                    b.HasKey("ID");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SkystoneScouting.Models.UserActivity", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("PerformedBy");

                    b.HasKey("ID");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
